一、基本类型和引用类型

1、引用类型可以添加属性和方法

var person=new Object();
person.name='asd';
alert(person.name)     // 'asd'

2、复制变量值

当从一个变量向另一个变量复制基本类型值和引用类型值两者有区别

基本类型值: 
var num1=5;
var num2=num1;
num1='';
alert(num2)  //  '5'
alert(num1)  //  ''
创建的两个变量指向不同内存空间，只是将num1中变量值传递给了num2

引用类型值:
var obj1=new Object();
var obj2=obj1;
obj1.name='asd';
alert（obj1.name）  // 'asd'
alert(obj2.name)    // 'asd'
obj1指向object对象，其实是个指针，会在本地复制一遍object属性方法。执行复制操作后新变量也会指向object对象，对obj1添加属性
操作其实就是对引用对象object执行操作。所以obj2.name访问的是obejct对象的属性  自然可以输出


3、传递参数

函数外部向函数内部传递参数，其实就是把值从一个变量复制到另一个变量，跟基本类型传递方式相同

function add(num){
	num+=10;
	return num;
}
var test=10;
var test2=add(test);
alert(test)     //'10'
alert(test2)    //'20'


不管变量是引用类型值还是基本类型值，在函数传递参数这块都是按值传递给函数内部的


function set(obj){
	obj.name='asd';
	obj=new Object();
	obj.name='qwe';
}
var test=new Object();
set(test);
alert(test.name)     //'asd';

其实这里其实函数内部又重新引用了一个Object的局部对象，在函数执行完毕后自动销毁。如果这里函数传参如果是按引用类型值的话，
obj和test都会作为一个指针指向object这个对象，那么修改name属性是会起作用的 。结果是没有起作用，就说明这里参数是按基本类
型传递的。。


4、类型检测


typeof :区分字符串、数值、布尔值、或者undefined。
局限:对于对象或者null 都会返回object，无法区分

instanceof:区分object,因为所有引用类型值都是object实例，而基本类型不是对象




二、执行环境和作用域


执行环境:每个执行环境都有一个与之相关联的变量对象，环境所有定义的变量和函数都在这对象里面。web浏览器全局对象为window。所有
变量和函数都作为window属性和方法创建


作用域链:每一个对象创建时候都有自己的执行环境，作用域链就是用来保证当前环境下所能访问的变量及函数能访问到，它从变量对象arguments
开始，外部一层层套着许多个包含环境，直到window的全局执行环境。


强调:JS只有顶级作用域和函数作用域，没有块级作用域。与C语言、JAVA的比较大的区别

for(var i;i<10;i++){
	i;
}
alert(i)     //'10'
因为没有块级作用域，所以for内部定义的循环变量在循环结束并没有销毁，而是会执行再循环外部环境中


2、变量声明

var:声明变量  
let:声明块级作用域的变量   
const:声明常量


通过var声明的变量会自动添加到最近的执行环境里，如函数内部声明的变量就会添加到函数内部的执行环境里
如果未用任何声明关键字,变量创建则直接默认为执行环境为全局环境，可在所有地方访问


function(sum1,sum2){
	sum=sum1+sum2;
	return sum;
}
var result=add(10,20);    //'30'
alert(sum);      	  //'30'



三、内存问题

Javascript自动垃圾收集机制来处理内存回收问题

自动垃圾收集机制:找出不用继续使用的变量，释放掉这些变量占用的内存

实现机制有两种:

1、标记清除

总体思路是变量在当前执行环境找不到标记它为'离开环境状态'
变量在当前执行环境找得到标记为'进入环境状态'
然后所有离开环境状态的变量都会被释放掉


2、引用计数法

...


一般内存优化方案为不用的变量或者函数将其释放掉(赋值null)


第5章 引用类型

object类型、Array类型、Date类型、RegExp类型、function类型、包装类型

注意:

1、Array类型的迭代方法

every():数组每一项运行给定函数，如果函数每一项都返回true，则返回true;	(与门)
filter():数组每一项运行给定函数，函数返回由布尔值组成的数组;
foreach():数组每一项运行给定函数，无返回值;
map():数组每一项运行给定函数，返回每次函数调用的结果组成的数组;
some():数组每一项运行给定函数,如果函数对任一项返回true,则返回true;  (或门)


var number=[1,2,3,4,5,4,3,1]

var result=number.every(function(item,index,array){
	return (item>2);
})

alert(result)     //'false'


var result1=number.some(function(item,index,array){
	return (item>2);
})

alert(result1)    //'true'   


var result2=number.map(function(item,index,array){
	return item*2;
});

alert(result2)    //'[2,4,6,8,10,8,6,2]'


2、function类型的解释

(1) js中所有函数都是对象，因为函数都是function类型的实例，具有funcrtion类型的属性和方法
函数名其实是一个指向函数对象的指针

(2) 没有重载

function add(num){
	return num+100;
}
function add(num){
	return num+200;
}  
var result=add(100)     //'300'

这里因为函数名是一个指向函数对象的指针，所以第一个add函数执行完后,add指针改变了指向，指向另一个函数

(3)  函数声明与函数表达式区别 

代码执行之前，所有函数声明在解析时候会有个函数声明提升过程
而函数表达式则没有

alert(sum(10,20))
function(num1,num2){
	return num1+num2;
}
上面函数是没问题的，有函数声明提升

alert(sum(10,20))
var sum=function(sum1,sum2){
	return sum1+sum2;
};

上面函数则会报错，因为函数位于一个初始化语句中，不是函数声明

(函数内部属性arguments和this)

arguments对象还具有一个属性callee:作用是指针，指向具有arguments这个对象的函数

function add(i){
	if(i<=0){
	return 1;	
}else{
	return i*arguments.callee(i-1)
}
}


函数中的call()和apply()

核心是借代，借用其他执行环境来替换当前函数执行环境，扩充作用域。




第6章 面向对象


object.defineProperty


window.color='red';
var o={color:'blue'};
function set(){
	alert(this.color)
}
set();                     //'red'
set.call(this)		   //'red'
set.call(window)	   //'red'
set.call(o)		   //'blue'


Global对象中的eval()

eval()创建的变量或者函数不会有提升。因为解析代码时候它们最开始是当成一个字符串处理，eval()执行时候才会被编译为JS代码



P140


一、对象


注:属性的特性--属性的的各种特征

1、属性类型:两种（数据属性和访问器属性）


（1）数据属性
	configurable:能否delete删除，能否把属性修改为访问器属性
	enumerable:能否for-in遍历属性
	writable:能否修改属性值
	value:属性数据值

修改方法见es5 Object.defineProperty()方法

var obj={
	name:123
};
Object.defineProperty=(obj,'name',{
	writable:false,
	value:234
})
console.log(obj.name)		//234
obj.name=333;
console.log(obj.name)		//234



（2）访问器属性
	configurable:同上
	enumerable:同上
	get:读取属性时侯的钩子函数
	set:写入属性时侯的钩子函数

注:访问器属性只能通过Object.defineProperty()来定义

var obj={
	_year:123
}

Object.defineProperty(obj,'year',{      //这里year是自定义的访问器属性，跟前面_year没有关系
	get:function(){
		...
	},
	set:function(){
		...
	}
})      

同时定义多个属性:Object.defineProperties()


2、读取属性特性

Object.getOwnPropertyDescriptor()。
var obj={
	asd:123
}
var res=Object.getOwnPropertyDescriptor(obj,'asd')

如果目标属性是数据属性，则返回value,writable这四个
如果是访问器属性，则返回get,set这四个



二、对象原型

判断对象来自实例还是原型

function hasProp(obj,name){
	return !object.hasOwnProperty(name)&&(name in object)
}



对象原型模式注意点

function person(){
	...
}
person.prototype={
	name:'asd',
	age:2
	...
}

（1）、这种设置方式相当于用字面量形式创建一个对象，则constructor属性不会再指向原对象，而回指向object

function person(){
	...
}
console.log(person.prototype.constructor)	//person(){}	
person.prototype={
	name:'asd',
	age:2
	...
}
console.log(person.prototype.constructor)	//object

（2）、同样字面量设置可以设置constructor属性

...
person.prototype={
	constructor:person
}

这样设置会有问题，constructor的数据属性enumerable会改为true，变成可枚举的属性？？？？

（3）、原型动态性

function person(){
	...
}
var friend=new person();
person.prototype.ok=function(){
	console.log('hi')
};
friend.ok()		//'hi'

实例和原型之间的松散连接关系。调用friend.ok时侯，先在实例搜索名为'ok'的属性，没找到就搜索原
型。

如果修改了原型对象

...
person.prototype={
	constructor:person
	ok:function(){
		console.log('hi')
	}
}

friend.ok()		// error
	
重写person的原型对象后，切断了现有原型和任何之前已经存在的对象实例之间的联系，之前的还是用的最初的原型

同样原生的引用类型也是用这种方式创建的，像Array,都是在其构造函数的原型上定义了方法

console.log(typeof Array.prototype.sort())	//object

三、继承

oo语言继承有两种方式:接口继承和实现继承
接口继承只继承方法签名，实现继承则继承实际的方法。
JS只支持实现继承，通过原型链实现继承

1、原型链

思想是:利用原型让一个引用类型继承另一个引用类型的属性和方法

（1）组合继承:
function a(){
	this.name=name;
}

function b(name){
	a.call(this,name)
}

b.prototype=new a();
var c=new b('asd');
var d=new b('zxc');
console.log(c.name)		//'asd'
console.log(d.name)		//'zxc'

组合式继承，可以分别有自己属性和方法


（2）原型继承:
function obj(o){
	function f(){}
	f.prototype=o;
	return new f();
}

ES5新增Object.create()方法规范化原型式继承

var person={
	name:asd
}

var obj=Object.create(person);
console.log(obj.name)		//asd

同样可以自定义属性

...
var obj=Object.create(person,{
	name:{
		value:'zxc'
	}
})

console.log(obj.name)		//zxc



（3）寄生式继承
。。。




第7章 函数

创建函数两种:函数声明和函数表达式

（1）、函数声明

asd()		//'asd'
function asd(){
	console.log('asd')
}

函数声明方式会有函数声明提升，代码执行前先读取函数声明。

（2）、函数表达式

asd()		// 错误
var asd=function(){
	console.log('asd')
}

这种方式function后面没有跟标识符，所以也是匿名函数。并且跟其他表达式一样要先赋值


一、递归

arguments.callee是一个指向正在执行的函数的指针

function f(num){
	if(num<=1){
		return 1;
	}else{
		return num*arguments.callee(num-1);
	}
}

用这个替代函数名，可以避免函数内存释放的问题。但在严格模式下还是会有问题

二、闭包

闭包指有权访问另一个函数作用域的变量的函数。创建闭包:函数内部创建另一个函数


作用域链正常情况:函数内部函数创建时生成作用域链，包含全局变量对象。然后函数调用时候，又会将
当前函数活动对象创建推入执行环境作用域链的前端。

闭包情况:函数内部函数创建时生成作用域链，包含全局变量对象及内部函数的外部活动对象。



（1）闭包对于变量的影响
 function cf(){
	var res =new Array();
	for(var i=0;i<10;i++){
		reseult[i] = function(){
			return i;
		}
	}
	return result;
}


这里正是由于内部函数创建时，其外部活动变量i和全局变量被推入作用域链。每生成一个匿名函数；都

包含外部变量对象i，且引用的都是同一个变量对象i;所以当cf()函数被返回时候，此时外部活动对象i

的值保存的是10,所以所有的匿名函数返回的值都是10;


解决方法则是利用匿名函数


 function cf(){
	var res =new Array();
	for(var i=0;i<10;i++){
		reseult[i] = function(num){
			return function(){
				return num
			}
		}(i);
	}
	return result;
}

这里每次传入函数内部的值通过num接收，返回num值，由于函数参数是按值传递,所以每次变量的当前值
都有效被接收到，通过num返回。


补充:之前函数内部嵌套匿名函数,this指向window的解释。。。

函数调用时候，活动对象会包含两个特殊变量:this 和arguments。内部函数搜索变量时候，只会搜索到
自己的活动对象为止，不会访问外部函数的这两个变量。


第8章：BOM

一、window对象

全局对象，所有js写入的对象函数都会变成window对象的属性和方法


(1)窗口有关属性

1、screenLeft screenTop   2、screenX  screenY   3、innerWidth innerHeight   

4、outerWidth outerHeight

以上这几对有不同浏览器的兼容问题


二、location对象


hash    	返回url中的hash
host		服务器名称和端口号
hostname	不带端口号的服务器名称
href		当前加载页面的完整url
pathname	返回url中的目录和文件名
port		url指定端口号
protocol	页面使用的协议
search		返回url的查询字符串

上述属性方法单纯赋值效果与调用 assign()方法效果一样，直接改变当前加载的页面。这种方法修改也
会在历史记录生成一条记录，后退按钮会导航到前一个页面。可以用replace()方法，这样不会再历史记
录里生成新纪录，后退按钮也不会回到这个页面



三、navigator对象

用于识别客户端浏览器，检测浏览器类型


四、hiostory对象

用于修改当前url，历史记录url





第10章:DOM


一、节点

参照文档对象模型图例




二、Node类型

所有节点都具有一个nodeType属性


属性节点element.getAttributeNode('...')

暂时提供常用几种:

Node.ELEMENT_NODE(1)   		//元素节点，标签
Node.ATTRIBUTE_NODE(2)		//属性节点，style,id
Node.TEXT_NODE(3)		//文本节点
Node.DOCUMENT_NODE(9)		//dom节点
 
以下省略
。。。自行翻书





第13章:事件

一、事件流

IE:事件冒泡流    Netscape:事件捕获流

（1）事件冒泡

由点击元素优先响应，通过DOM树向上传播，直到document对象

（2）事件捕获

与冒泡完全相反，document对象优先响应，向下传递到具体点击元素


二、DOM事件处理程序

DOM2级事件规定事件流包括三个阶段:事件捕获、处于目标阶段和事件冒泡阶段



DOM0级事件处理程序

是js事件处理程序的传统方式,将一个函数赋值给一个事件处理程序属性

document.getElementById('asd').onlcick=function(){
	...
}

此时指定的事件处理程序可以被认为是元素的方法，在元素的作用域中运行。


DOM2级事件处理程序

addEventListener()和removeEventListener()

接收三个参数，要处理的事件名、事件处理程序的函数、布尔值

布尔值为true表示捕获阶段调用事件处理程序，反之则是冒泡阶段调用事件处理程
序。

document.getElementById('ASD').addEventListener('click',function(){
	...
},fasle)


用上述方法注册的事件只能用对应方法来移除相应事件。若需要将事件侦听的事件处

理程序注销，则需要采用具有函数名的函数，不能使用匿名函数。、。


IE事件处理程序

attachEvent()和detachEvent()

这两个函数与DOM0级方法区别在于事件处理程序作用域。DOM0级方法，事件处理程序
在所属元素作用域内运行，attachEvent()这两个的事件处理程序在全局作用域中运行
。

此方法用于ie浏览器 ，谷歌经测试不能使用


三、事件对象

事件处理程序中会传入一个特殊对象event


如type 		事件类型
target		事件目标
canvelable	是否可以取消事件默认行为
currentTarget	当前正在处理事件的那个元素
等。。。


四、事件类型

略


五、内存和性能

事件委托:给父级或更高级元素绑定事件，添加事件处理程序，通过event对象来区分

不同子元素，做出不同事件处理，节约内存





